% load("LM01Data.mat")
load("LM04Data.mat")

nfontslatex = 18;
nfonts = 14;

k_max = 35;
h = @(x,t) x(1)*sin(x(2)*t+x(3));
f = @(x) x(1)*sin(x(2)*t+x(3))-y;
x0 = [1.0, 100*pi, 0.0]';
n = length(x0);

J = @(x) [sin(x(2)*t+x(3)) x(1)*t.*cos(x(2)*t+x(3)) x(1)*cos(x(2)*t+x(3))];
X = zeros(n,k_max+1);
Ls = zeros(1, k_max);

Ls(:, 1) = 1.0;

X(:,1) = x0;
L = 1.0;


for k = 1:k_max
    x = X(:,k);
    Ls(k) = L;
    xNew = x - ((J(x)'*J(x)) + L*eye(n))\J(x)'*f(x);
    if ( norm(f(xNew)) < norm(f(x0)) )
        X(:,k+1) = xNew;
        L = 0.8*L;
    else
        X(:,k+1) = x;
        L = 2*L;
    end
end
xOptimal = X(:,end);

% rys1
% plot01 = plot(t,y,"s","MarkerEdgeColor","r","MarkerFaceColor","r");
% hold on
% tPlot = linspace(t(1),t(end),1e+3)';
% plot02 = plot(tPlot,h(x0,tPlot),"b","LineWidth",2);
% plot03 = plot(tPlot,h(xOptimal,tPlot),"k","LineWidth",2);
% legend([plot01,plot02,plot03],"measurement", "first guess", "final fit")

% rys2
% subplot(3,1,1)
% plot((0:k_max),X(1,:),"k","LineWidth",2)
% ylabel("$A$ [a.u.]","Interpreter","Latex","FontSize",nfontslatex)
% subplot(3,1,2)
% plot((0:k_max),X(2,:),"k","LineWidth",2)
% ylabel("$\omega$ [rad/s]","Interpreter","Latex","FontSize",nfontslatex)
% subplot(3,1,3)
% plot((0:k_max),X(3,:),"k","LineWidth",2)
% ylabel("$\varphi$ [rad]","Interpreter","Latex","FontSize",nfontslatex)
% xlabel("iteration number","Interpreter","Latex","FontSize",nfontslatex)


% rys3
% scatter(1:1:k_max, Ls)
% rys4
% y_norm = zeros(1, k_max);
% for k = 1:k_max
%     y_norm(:, k) = power(norm(f(X(:, k))), 2);
% end
% scatter(1:1:k_max, y_norm);


% % Objective function
% fun = @(x) sum((x(1)*sin(x(2)*t + x(3)) - y).^2);
% 
% % Initial guess
% x0 = [2; 2; 2];
% 
% % Constraints (if any)
% A = [];
% b = [];
% Aeq = [];
% beq = [];
% lb = [];
% ub = [];
% 
% % Solve the optimization problem
% options = optimset('Display', 'iter');
% [x_optimal, fval] = fmincon(fun, x0, A, b, Aeq, beq, lb, ub, [], options);
% 
% % Extract optimal values
% optimal_A = x_optimal(1);
% optimal_omega = x_optimal(2);
% optimal_phi = x_optimal(3);
% 
% scatter(t, y);
% hold on;
% plot(t, optimal_A*sin(optimal_omega*t+optimal_phi));
% hold off;
% 
